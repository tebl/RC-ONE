0000-                  4       ;
0000-                  5       ; Microchess, originally written by Peter Jennings for the KIM-1 computer and
0000-                  6       ; then later changed by Daryl Rictor for use with a 6551-based serial card.
0000-                  7       ; I've made slight alterations to the code to make it asseble correctly with
0000-                  8       ; SB-Assembler 3 as well as replaced a few 65c02 instructions to restore
0000-                  9       ; NMOS 6502 compatibility.
0000-                 10       ;
7F70-                 11       ACIA    .EQ     $7F70
0000-                 12
00C8-                 13               .OR     0200
00C8-                 14               .TA     0200
00C8-                 15               .IN     game.asm
00C8-            I     1       ;***********************************************************************
00C8-            I     2       ;
00C8-            I     3       ;  Kim-1 MicroChess (c) 1976-2005 Peter Jennings, www.benlo.com
00C8-            I     4       ;
00C8-            I     5       ;***********************************************************************
00C8-            I     6
00C8-            I     7       ; All rights reserved.
00C8-            I     8
00C8-            I     9       ; Redistribution and use in source and binary forms, with or without
00C8-            I    10       ; modification, are permitted provided that the following conditions
00C8-            I    11       ; are met:
00C8-            I    12       ; 1. Redistributions of source code must retain the above copyright
00C8-            I    13       ;    notice, this list of conditions and the following disclaimer.
00C8-            I    14       ; 2. Redistributions in binary form must reproduce the above copyright
00C8-            I    15       ;    notice, this list of conditions and the following disclaimer in the
00C8-            I    16       ;    documentation and/or other materials provided with the distribution.
00C8-            I    17       ; 3. The name of the author may not be used to endorse or promote products
00C8-            I    18       ;    derived from this software without specific prior written permission.
00C8-            I    19
00C8-            I    20       ; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
00C8-            I    21       ; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
00C8-            I    22       ; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
00C8-            I    23       ; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
00C8-            I    24       ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
00C8-            I    25       ; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
00C8-            I    26       ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
00C8-            I    27       ; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
00C8-            I    28       ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
00C8-            I    29       ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
00C8-            I    30
00C8-            I    31       ;
00C8-            I    32       ; modified by Daryl Rictor to work over a
00C8-            I    33       ; serial terminal connection, August 2002.
00C8-            I    34       ;
00C8-            I    35       ; Updated with corrections to earlier OCR errors by Bill Forster, August 2005.
00C8-            I    36       ;
00C8-            I    37
00C8-            I    38       ;
00C8-            I    39       ; 6551 I/O Port Addresses
00C8-            I    40       ;
7F70-            I    41       ACIADat .EQ     ACIA
7F71-            I    42       ACIASta .EQ     ACIA+1
7F72-            I    43       ACIACmd .EQ     ACIA+2
7F73-            I    44       ACIACtl .EQ     ACIA+3
00C8-            I    45       ;
00C8-            I    46       ; page zero variables
00C8-            I    47       ;
0050-            I    48       BOARD   .EQ     $50
0060-            I    49       BK      .EQ     $60
00B0-            I    50       PIECE   .EQ     $B0
00B1-            I    51       SQUARE  .EQ     $B1
00B2-            I    52       SP2     .EQ     $B2
00B3-            I    53       SP1     .EQ     $B3
00B4-            I    54       INCHEK  .EQ     $B4
00B5-            I    55       STATE   .EQ     $B5
00B6-            I    56       MOVEN   .EQ     $B6
00B7-            I    57       REV     .EQ     $B7
00DC-            I    58       OMOVE   .EQ     $DC
00DD-            I    59       WCAP0   .EQ     $DD
00DE-            I    60       COUNT   .EQ     $DE
00DE-            I    61       BCAP2   .EQ     $DE
00DF-            I    62       WCAP2   .EQ     $DF
00E0-            I    63       BCAP1   .EQ     $E0
00E1-            I    64       WCAP1   .EQ     $E1
00E2-            I    65       BCAP0   .EQ     $E2
00E3-            I    66       MOB     .EQ     $E3
00E4-            I    67       MAXC    .EQ     $E4
00E5-            I    68       CC      .EQ     $E5
00E6-            I    69       PCAP    .EQ     $E6
00E3-            I    70       BMOB    .EQ     $E3
00E4-            I    71       BMAXC   .EQ     $E4
00E5-            I    72       BMCC    .EQ     $E5         ; was BCC (TASS doesn't like it as a label)
00E6-            I    73       BMAXP   .EQ     $E6
00E8-            I    74       XMAXC   .EQ     $E8
00EB-            I    75       WMOB    .EQ     $EB
00EC-            I    76       WMAXC   .EQ     $EC
00ED-            I    77       WCC     .EQ     $ED
00EE-            I    78       WMAXP   .EQ     $EE
00EF-            I    79       PMOB    .EQ     $EF
00F0-            I    80       PMAXC   .EQ     $F0
00F1-            I    81       PCC     .EQ     $F1
00F2-            I    82       PCP     .EQ     $F2
00F3-            I    83       OLDKY   .EQ     $F3
00FB-            I    84       BESTP   .EQ     $FB
00FA-            I    85       BESTV   .EQ     $FA
00F9-            I    86       BESTM   .EQ     $F9
00FB-            I    87       DIS1    .EQ     $FB
00FA-            I    88       DIS2    .EQ     $FA
00F9-            I    89       DIS3    .EQ     $F9
00FC-            I    90       temp    .EQ     $FC
00FD-            I    91       temp2   .EQ     $FD
00C8-            I    92       ;
00C8-            I    93       ;
00C8-            I    94       ;
00C8-A9 00       I    95 (  2)         LDA     #$00        ; REVERSE TOGGLE
00CA-85 B7       I    96 (  2)         STA     REV
00CC-20 1C 05    I    97 (  6)         JSR     Init_6551
00CF-D8          I    98 (  2) CHESS   CLD                 ; INITIALIZE
00D0-A2 FF       I    99 (  2)         LDX     #$FF        ; TWO STACKS
00D2-9A          I   100 (  2)         TXS
00D3-A2 C8       I   101 (  2)         LDX     #$C8
00D5-86 B2       I   102 (  3)         STX     SP2
00D7-            I   103       ;
00D7-            I   104       ;       ROUTINES TO LIGHT LED
00D7-            I   105       ;       DISPLAY AND GET KEY
00D7-            I   106       ;       FROM KEYBOARD
00D7-            I   107       ;
00D7-20 40 04    I   108 (  6) OUT     JSR     pout        ; DISPLAY AND
00DA-20 11 05    I   109 (  6)         JSR     KIN         ; GET INPUT   *** my routine waits for a keypress
00DD-            I   110       ;       CMP     OLDKY       ; KEY IN ACC  *** no need to debounce
00DD-            I   111       ;       BEQ     OUT         ; (DEBOUNCE)
00DD-            I   112       ;       STA     OLDKY
00DD-            I   113       ;
00DD-C9 43       I   114 (  2)         CMP     #$43        ; [C]
00DF-D0 12       I   115 (2**)         BNE     NOSET       ; SET UP
00E1-A2 1F       I   116 (  2)         LDX     #$1F        ; BOARD
00E3-BD 00 06    I   117 ( 4*) WHSET   LDA     SETW,X      ; FROM
00E6-95 50       I   118 (  4)         STA     BOARD,X     ; SETW
00E8-CA          I   119 (  2)         DEX
00E9-10 F8       I   120 (2**)         BPL     WHSET
00EB-A2 1B       I   121 (  2)         LDX     #$1B        ; *ADDED
00ED-86 DC       I   122 (  3)         STX     OMOVE       ; INITS TO $FF
00EF-A9 CC       I   123 (  2)         LDA     #$CC        ; Display CCC
00F1-D0 19       I   124 (2**)         BNE     CLDSP
00F3-            I   125       ;
00F3-C9 45       I   126 (  2) NOSET   CMP     #$45        ; [E]
00F5-D0 0E       I   127 (2**)         BNE     NOREV       ; REVERSE
00F7-20 89 02    I   128 (  6)         JSR     REVERSE     ; BOARD IS
00FA-38          I   129 (  2)         SEC
00FB-A9 01       I   130 (  2)         LDA     #$01
00FD-E5 B7       I   131 (  3)         SBC     REV
00FF-85 B7       I   132 (  2)         STA     REV         ; TOGGLE REV FLAG
0101-A9 EE       I   133 (  2)         LDA     #$EE        ; IS
0103-D0 07       I   134 (2**)         BNE     CLDSP
0105-            I   135       ;
0105-C9 40       I   136 (  2) NOREV   CMP     #$40        ; [P]
0107-D0 0B       I   137 (2**)         BNE     NOGO        ; PLAY CHESS
0109-20 7D 03    I   138 (  6)         JSR     GO
010C-85 FB       I   139 (  2) CLDSP   STA     DIS1        ; DISPLAY
010E-85 FA       I   140 (  2)         STA     DIS2        ; ACROSS
0110-85 F9       I   141 (  2)         STA     DIS3        ; DISPLAY
0112-D0 BB       I   142 (2**)         BNE     CHESS
0114-            I   143       ;
0114-C9 0D       I   144 (  2) NOGO    CMP     #$0D        ; [Enter]
0116-D0 06       I   145 (2**)         BNE     NOMV        ; MOVE MAN
0118-20 23 03    I   146 (  6)         JSR     MOVE        ; AS ENTERED
011B-4C C5 01    I   147 (  3)         JMP     DISP
011E-C9 41       I   148 (  2) NOMV    CMP     #$41        ; [Q] ***Added to allow game exit***
0120-F0 03       I   149 (2**)         BEQ     DONE        ; quit the game, exit back to system.
0122-4C BE 01    I   150 (  3)         JMP     INPUT       ; process move
0125-4C 00 FF    I   151 (  3) DONE    JMP     $FF00       ; *** MUST set this to YOUR OS starting address
0128-            I   152       ;
0128-            I   153       ;       THE ROUTINE JANUS DIRECTS THE
0128-            I   154       ;       ANALYSIS BY DETERMINING WHAT
0128-            I   155       ;       SHOULD OCCUR AFTER EACH MOVE
0128-            I   156       ;       GENERATED BY GNM
0128-            I   157       ;
0128-            I   158       ;
0128-            I   159       ;
0128-A6 B5       I   160 (  3) JANUS   LDX     STATE
012A-30 5C       I   161 (2**)         BMI     NOCOUNT
012C-            I   162       ;
012C-            I   163       ;       THIS ROUTINE COUNTS OCCURRENCES
012C-            I   164       ;       IT DEPENDS UPON STATE TO INDEX
012C-            I   165       ;       THE CORRECT COUNTERS
012C-            I   166       ;
012C-A5 B0       I   167 (  3) COUNTS  LDA     PIECE
012E-F0 08       I   168 (2**)         BEQ     OVER        ; IF STATE=8
0130-E0 08       I   169 (  2)         CPX     #$08        ; DO NOT COUNT
0132-D0 04       I   170 (2**)         BNE     OVER        ; BLK MAX CAP
0134-C5 E6       I   171 (  3)         CMP     BMAXP       ; MOVES FOR
0136-F0 2E       I   172 (2**)         BEQ     XRT         ; WHITE
0138-            I   173       ;
0138-F6 E3       I   174 (  6) OVER    INC     MOB,X       ; MOBILITY
013A-C9 01       I   175 (  2)         CMP     #$01        ;  + QUEEN
013C-D0 02       I   176 (2**)         BNE     NOQ         ; FOR TWO
013E-F6 E3       I   177 (  6)         INC     MOB,X
0140-            I   178       ;
0140-50 1E       I   179 (2**) NOQ     BVC     NOCAP
0142-A0 0F       I   180 (  2)         LDY     #$0F        ; CALCULATE
0144-A5 B1       I   181 (  3)         LDA     SQUARE      ; POINTS
0146-D9 60 00    I   182 ( 4*) ELOOP   CMP     BK,Y        ; CAPTURED
0149-F0 03       I   183 (2**)         BEQ     FOUN        ; BY THIS
014B-88          I   184 (  2)         DEY                 ; MOVE
014C-10 F8       I   185 (2**)         BPL     ELOOP
014E-B9 31 06    I   186 ( 4*) FOUN    LDA     POINTS,Y
0151-D5 E4       I   187 (  4)         CMP     MAXC,X
0153-90 04       I   188 (2**)         BCC     LESS        ; SAVE IF
0155-94 E6       I   189 (  4)         STY     PCAP,X      ; BEST THIS
0157-95 E4       I   190 (  4)         STA     MAXC,X      ; STATE
0159-            I   191       ;
0159-18          I   192 (  2) LESS    CLC
015A-08          I   193 (  3)         PHP                 ; ADD TO
015B-75 E5       I   194 (  4)         ADC     CC,X        ; CAPTURE
015D-95 E5       I   195 (  4)         STA     CC,X        ; COUNTS
015F-28          I   196 (  4)         PLP
0160-            I   197       ;
0160-E0 04       I   198 (  2) NOCAP   CPX     #$04
0162-F0 03       I   199 (2**)         BEQ     ON4
0164-30 31       I   200 (2**)         BMI     TREE        ;(=00 ONLY)
0166-60          I   201 (  6) XRT     RTS
0167-            I   202       ;
0167-            I   203       ;      GENERATE FURTHER MOVES FOR COUNT
0167-            I   204       ;      AND ANALYSIS
0167-            I   205       ;
0167-A5 E8       I   206 (  3) ON4     LDA     XMAXC       ; SAVE ACTUAL
0169-85 DD       I   207 (  2)         STA     WCAP0       ; CAPTURE
016B-A9 00       I   208 (  2)         LDA     #$00        ; STATE=0
016D-85 B5       I   209 (  2)         STA     STATE
016F-20 23 03    I   210 (  6)         JSR     MOVE        ; GENERATE
0172-20 89 02    I   211 (  6)         JSR     REVERSE     ; IMMEDIATE
0175-20 D7 01    I   212 (  6)         JSR     GNMZ        ; REPLY MOVES
0178-20 89 02    I   213 (  6)         JSR     REVERSE
017B-            I   214       ;
017B-A9 08       I   215 (  2)         LDA     #$08        ; STATE=8
017D-85 B5       I   216 (  2)         STA     STATE       ; GENERATE
017F-20 E0 01    I   217 (  6)         JSR     GNM         ; CONTINUATION
0182-20 09 03    I   218 (  6)         JSR     UMOVE       ; MOVES
0185-            I   219       ;
0185-4C DA 03    I   220 (  3)         JMP     STRATGY     ; FINAL EVALUATION
0188-E0 F9       I   221 (  2) NOCOUNT CPX     #$F9
018A-D0 0B       I   222 (2**)         BNE     TREE
018C-            I   223       ;
018C-            I   224       ;      DETERMINE IF THE KING CAN BE
018C-            I   225       ;      TAKEN, USED BY CHKCHK
018C-            I   226       ;
018C-A5 60       I   227 (  3)         LDA     BK          ; IS KING
018E-C5 B1       I   228 (  3)         CMP     SQUARE      ; IN CHECK?
0190-D0 04       I   229 (2**)         BNE     RETJ        ; SET INCHEK=0
0192-A9 00       I   230 (  2)         LDA     #$00        ; IF IT IS
0194-85 B4       I   231 (  2)         STA     INCHEK
0196-60          I   232 (  6) RETJ    RTS
0197-            I   233       ;
0197-            I   234       ;      IF A PIECE HAS BEEN CAPTURED BY
0197-            I   235       ;      A TRIAL MOVE, GENERATE REPLIES &
0197-            I   236       ;      EVALUATE THE EXCHANGE GAIN/LOSS
0197-            I   237       ;
0197-50 FD       I   238 (2**) TREE    BVC     RETJ        ; NO CAP
0199-A0 07       I   239 (  2)         LDY     #$07        ; (PIECES)
019B-A5 B1       I   240 (  3)         LDA     SQUARE
019D-D9 60 00    I   241 ( 4*) LOOPX   CMP     BK,Y
01A0-F0 05       I   242 (2**)         BEQ     FOUNX
01A2-88          I   243 (  2)         DEY
01A3-F0 F1       I   244 (2**)         BEQ     RETJ        ; (KING)
01A5-10 F6       I   245 (2**)         BPL     LOOPX       ; SAVE
01A7-B9 31 06    I   246 ( 4*) FOUNX   LDA     POINTS,Y    ; BEST CAP
01AA-D5 E2       I   247 (  4)         CMP     BCAP0,X     ; AT THIS
01AC-90 02       I   248 (2**)         BCC     NOMAX       ; LEVEL
01AE-95 E2       I   249 (  4)         STA     BCAP0,X
01B0-C6 B5       I   250 (  5) NOMAX   DEC     STATE
01B2-A9 FB       I   251 (  2)         LDA     #$FB        ; IF STATE=FB
01B4-C5 B5       I   252 (  3)         CMP     STATE       ; TIME TO TURN
01B6-F0 03       I   253 (2**)         BEQ     UPTREE      ; AROUND
01B8-20 FD 02    I   254 (  6)         JSR     GENRM       ; GENERATE FURTHER
01BB-E6 B5       I   255 (  5) UPTREE  INC     STATE       ; CAPTURES
01BD-60          I   256 (  6)         RTS
01BE-            I   257       ;
01BE-            I   258       ;      THE PLAYER'S MOVE IS INPUT
01BE-            I   259       ;
01BE-C9 08       I   260 (  2) INPUT   CMP     #$08        ; NOT A LEGAL
01C0-B0 12       I   261 (2**)         BCS     ERROR       ; SQUARE #
01C2-20 CA 03    I   262 (  6)         JSR     DISMV
01C5-A2 1F       I   263 (  2) DISP    LDX     #$1F
01C7-B5 50       I   264 (  4) SEARCH  LDA     BOARD,X
01C9-C5 FA       I   265 (  3)         CMP     DIS2
01CB-F0 03       I   266 (2**)         BEQ     HERE        ; DISPLAY
01CD-CA          I   267 (  2)         DEX                 ; PIECE AT
01CE-10 F7       I   268 (2**)         BPL     SEARCH      ; FROM
01D0-86 FB       I   269 (  3) HERE    STX     DIS1        ; SQUARE
01D2-86 B0       I   270 (  3)         STX     PIECE
01D4-4C CF 00    I   271 (  3) ERROR   JMP     CHESS
01D7-            I   272       ;
01D7-            I   273       ;      GENERATE ALL MOVES FOR ONE
01D7-            I   274       ;      SIDE, CALL JANUS AFTER EACH
01D7-            I   275       ;      ONE FOR NEXT STEP
01D7-            I   276       ;
01D7-            I   277       ;
01D7-A2 10       I   278 (  2) GNMZ    LDX     #$10        ; CLEAR
01D9-A9 00       I   279 (  2) GNMX    LDA     #$00        ; COUNTERS
01DB-95 DE       I   280 (  4) CLEAR   STA     COUNT,X
01DD-CA          I   281 (  2)         DEX
01DE-10 FB       I   282 (2**)         BPL     CLEAR
01E0-            I   283       ;
01E0-A9 10       I   284 (  2) GNM     LDA     #$10        ; SET UP
01E2-85 B0       I   285 (  2)         STA     PIECE       ; PIECE
01E4-C6 B0       I   286 (  5) NEWP    DEC     PIECE       ; NEW PIECE
01E6-10 01       I   287 (2**)         BPL     NEX         ; ALL DONE?
01E8-60          I   288 (  6)         RTS                 ;    -YES
01E9-            I   289       ;
01E9-20 F6 02    I   290 (  6) NEX     JSR     RESET       ; READY
01EC-A4 B0       I   291 (  3)         LDY     PIECE       ; GET PIECE
01EE-A2 08       I   292 (  2)         LDX     #$08
01F0-86 B6       I   293 (  3)         STX     MOVEN       ; COMMON START
01F2-C0 08       I   294 (  2)         CPY     #$08        ; WHAT IS IT?
01F4-10 41       I   295 (2**)         BPL     PAWN        ; PAWN
01F6-C0 06       I   296 (  2)         CPY     #$06
01F8-10 2E       I   297 (2**)         BPL     KNIGHT      ; KNIGHT
01FA-C0 04       I   298 (  2)         CPY     #$04
01FC-10 1F       I   299 (2**)         BPL     BISHOP      ; BISHOP
01FE-C0 01       I   300 (  2)         CPY     #$01
0200-F0 09       I   301 (2**)         BEQ     QUEEN       ; QUEEN
0202-10 0E       I   302 (2**)         BPL     ROOK        ; ROOK
0204-            I   303       ;
0204-20 65 02    I   304 (  6) KING    JSR     SNGMV       ; MUST BE KING!
0207-D0 FB       I   305 (2**)         BNE     KING        ; MOVES
0209-F0 D9       I   306 (2**)         BEQ     NEWP        ; 8 TO 1
020B-20 73 02    I   307 (  6) QUEEN   JSR     LINE
020E-D0 FB       I   308 (2**)         BNE     QUEEN       ; MOVES
0210-F0 D2       I   309 (2**)         BEQ     NEWP        ; 8 TO 1
0212-            I   310       ;
0212-A2 04       I   311 (  2) ROOK    LDX     #$04
0214-86 B6       I   312 (  3)         STX     MOVEN       ; MOVES
0216-20 73 02    I   313 (  6) AGNR    JSR     LINE        ; 4 TO 1
0219-D0 FB       I   314 (2**)         BNE     AGNR
021B-F0 C7       I   315 (2**)         BEQ     NEWP
021D-            I   316       ;
021D-20 73 02    I   317 (  6) BISHOP  JSR     LINE
0220-A5 B6       I   318 (  3)         LDA     MOVEN       ; MOVES
0222-C9 04       I   319 (  2)         CMP     #$04        ; 8 TO 5
0224-D0 F7       I   320 (2**)         BNE     BISHOP
0226-F0 BC       I   321 (2**)         BEQ     NEWP
0228-            I   322       ;
0228-A2 10       I   323 (  2) KNIGHT  LDX     #$10
022A-86 B6       I   324 (  3)         STX     MOVEN       ; MOVES
022C-20 65 02    I   325 (  6) AGNN    JSR     SNGMV       ; 16 TO 9
022F-A5 B6       I   326 (  3)         LDA     MOVEN
0231-C9 08       I   327 (  2)         CMP     #$08
0233-D0 F7       I   328 (2**)         BNE     AGNN
0235-F0 AD       I   329 (2**)         BEQ     NEWP
0237-            I   330       ;
0237-A2 06       I   331 (  2) PAWN    LDX     #$06
0239-86 B6       I   332 (  3)         STX     MOVEN
023B-20 A1 02    I   333 (  6) P1      JSR     CMOVE       ; RIGHT CAP?
023E-50 05       I   334 (2**)         BVC     P2
0240-30 03       I   335 (2**)         BMI     P2
0242-20 28 01    I   336 (  6)         JSR     JANUS       ; YES
0245-20 F6 02    I   337 (  6) P2      JSR     RESET
0248-C6 B6       I   338 (  5)         DEC     MOVEN       ; LEFT CAP?
024A-A5 B6       I   339 (  3)         LDA     MOVEN
024C-C9 05       I   340 (  2)         CMP     #$05
024E-F0 EB       I   341 (2**)         BEQ     P1
0250-20 A1 02    I   342 (  6) P3      JSR     CMOVE       ; AHEAD
0253-70 8F       I   343 (2**)         BVS     NEWP        ; ILLEGAL
0255-30 8D       I   344 (2**)         BMI     NEWP
0257-20 28 01    I   345 (  6)         JSR     JANUS
025A-A5 B1       I   346 (  3)         LDA     SQUARE      ; GETS TO
025C-29 F0       I   347 (  2)         AND     #$F0        ; 3RD RANK?
025E-C9 20       I   348 (  2)         CMP     #$20
0260-F0 EE       I   349 (2**)         BEQ     P3          ; DO DOUBLE
0262-4C E4 01    I   350 (  3)         JMP     NEWP
0265-            I   351       ;
0265-            I   352       ;      CALCULATE SINGLE STEP MOVES
0265-            I   353       ;      FOR K,N
0265-            I   354       ;
0265-20 A1 02    I   355 (  6) SNGMV   JSR     CMOVE       ; CALC MOVE
0268-30 03       I   356 (2**)         BMI     ILL1        ; -IF LEGAL
026A-20 28 01    I   357 (  6)         JSR     JANUS       ; -EVALUATE
026D-20 F6 02    I   358 (  6) ILL1    JSR     RESET
0270-C6 B6       I   359 (  5)         DEC     MOVEN
0272-60          I   360 (  6)         RTS
0273-            I   361       ;
0273-            I   362       ;     CALCULATE ALL MOVES DOWN A
0273-            I   363       ;     STRAIGHT LINE FOR Q,B,R
0273-            I   364       ;
0273-20 A1 02    I   365 (  6) LINE    JSR     CMOVE       ; CALC MOVE
0276-90 02       I   366 (2**)         BCC     OVL         ; NO CHK
0278-50 F9       I   367 (2**)         BVC     LINE        ; NOCAP
027A-30 07       I   368 (2**) OVL     BMI     ILL         ; RETURN
027C-08          I   369 (  3)         PHP
027D-20 28 01    I   370 (  6)         JSR     JANUS       ; EVALUATE POSN
0280-28          I   371 (  4)         PLP
0281-50 F0       I   372 (2**)         BVC     LINE        ; NOT A CAP
0283-20 F6 02    I   373 (  6) ILL     JSR     RESET       ; LINE STOPPED
0286-C6 B6       I   374 (  5)         DEC     MOVEN       ; NEXT DIR
0288-60          I   375 (  6)         RTS
0289-            I   376       ;
0289-            I   377       ;      EXCHANGE SIDES FOR REPLY
0289-            I   378       ;      ANALYSIS
0289-            I   379       ;
0289-A2 0F       I   380 (  2) REVERSE LDX     #$0F
028B-38          I   381 (  2) ETC     SEC
028C-B4 60       I   382 (  4)         LDY     BK,X        ; SUBTRACT
028E-A9 77       I   383 (  2)         LDA     #$77        ; POSITION
0290-F5 50       I   384 (  4)         SBC     BOARD,X     ; FROM 77
0292-95 60       I   385 (  4)         STA     BK,X
0294-94 50       I   386 (  4)         STY     BOARD,X     ; AND
0296-38          I   387 (  2)         SEC
0297-A9 77       I   388 (  2)         LDA     #$77        ; EXCHANGE
0299-F5 50       I   389 (  4)         SBC     BOARD,X     ; PIECES
029B-95 50       I   390 (  4)         STA     BOARD,X
029D-CA          I   391 (  2)         DEX
029E-10 EB       I   392 (2**)         BPL     ETC
02A0-60          I   393 (  6)         RTS
02A1-            I   394       ;
02A1-            I   395       ;        CMOVE CALCULATES THE TO SQUARE
02A1-            I   396       ;        USING SQUARE AND THE MOVE
02A1-            I   397       ;       TABLE,  FLAGS SET AS FOLLOWS:
02A1-            I   398       ;       N - ILLEGAL MOVE
02A1-            I   399       ;       V - CAPTURE (LEGAL UNLESS IN CH)
02A1-            I   400       ;       C - ILLEGAL BECAUSE OF CHECK
02A1-            I   401       ;       [MY THANKS TO JIM BUTTERFIELD
02A1-            I   402       ;        WHO WROTE THIS MORE EFFICIENT
02A1-            I   403       ;        VERSION OF CMOVE]
02A1-            I   404       ;
02A1-A5 B1       I   405 (  3) CMOVE   LDA     SQUARE      ; GET SQUARE
02A3-A6 B6       I   406 (  3)         LDX     MOVEN       ; MOVE POINTER
02A5-18          I   407 (  2)         CLC
02A6-7D 20 06    I   408 ( 4*)         ADC     MOVEX,X     ; MOVE LIST
02A9-85 B1       I   409 (  2)         STA     SQUARE      ; NEW POS'N
02AB-29 88       I   410 (  2)         AND     #$88
02AD-D0 42       I   411 (2**)         BNE     ILLEGAL     ; OFF BOARD
02AF-A5 B1       I   412 (  3)         LDA     SQUARE
02B1-            I   413       ;
02B1-A2 20       I   414 (  2)         LDX     #$20
02B3-CA          I   415 (  2) LOOP    DEX                 ; IS TO
02B4-30 0E       I   416 (2**)         BMI     NO          ; SQUARE
02B6-D5 50       I   417 (  4)         CMP     BOARD,X     ; OCCUPIED?
02B8-D0 F9       I   418 (2**)         BNE     LOOP
02BA-            I   419       ;
02BA-E0 10       I   420 (  2)         CPX     #$10        ; BY SELF?
02BC-30 33       I   421 (2**)         BMI     ILLEGAL
02BE-            I   422       ;
02BE-A9 7F       I   423 (  2)         LDA     #$7F        ; MUST BE CAP!
02C0-69 01       I   424 (  2)         ADC     #$01        ; SET V FLAG
02C2-70 01       I   425 (2**)         BVS     SPX         ; (JMP)
02C4-            I   426       ;
02C4-B8          I   427 (  2) NO      CLV                 ; NO CAPTURE
02C5-            I   428       ;
02C5-A5 B5       I   429 (  3) SPX     LDA     STATE       ; SHOULD WE
02C7-30 24       I   430 (2**)         BMI     RETL        ; DO THE
02C9-C9 08       I   431 (  2)         CMP     #$08        ; CHECK CHECK?
02CB-10 20       I   432 (2**)         BPL     RETL
02CD-            I   433       ;
02CD-            I   434       ;        CHKCHK REVERSES SIDES
02CD-            I   435       ;       AND LOOKS FOR A KING
02CD-            I   436       ;       CAPTURE TO INDICATE
02CD-            I   437       ;       ILLEGAL MOVE BECAUSE OF
02CD-            I   438       ;       CHECK  SINCE THIS IS
02CD-            I   439       ;       TIME CONSUMING, IT IS NOT
02CD-            I   440       ;       ALWAYS DONE
02CD-            I   441       ;
02CD-48          I   442 (  3) CHKCHK  PHA                 ; STATE
02CE-08          I   443 (  3)         PHP
02CF-A9 F9       I   444 (  2)         LDA     #$F9
02D1-85 B5       I   445 (  2)         STA     STATE       ; GENERATE
02D3-85 B4       I   446 (  2)         STA     INCHEK      ; ALL REPLY
02D5-20 23 03    I   447 (  6)         JSR     MOVE        ; MOVES TO
02D8-20 89 02    I   448 (  6)         JSR     REVERSE     ; SEE IF KING
02DB-20 E0 01    I   449 (  6)         JSR     GNM         ; IS IN
02DE-20 06 03    I   450 (  6)         JSR     RUM         ; CHECK
02E1-28          I   451 (  4)         PLP
02E2-68          I   452 (  4)         PLA
02E3-85 B5       I   453 (  2)         STA     STATE
02E5-A5 B4       I   454 (  3)         LDA     INCHEK
02E7-30 04       I   455 (2**)         BMI     RETL        ; NO - SAFE
02E9-38          I   456 (  2)         SEC                 ; YES - IN CHK
02EA-A9 FF       I   457 (  2)         LDA     #$FF
02EC-60          I   458 (  6)         RTS
02ED-            I   459       ;
02ED-18          I   460 (  2) RETL    CLC                 ; LEGAL
02EE-A9 00       I   461 (  2)         LDA     #$00        ; RETURN
02F0-60          I   462 (  6)         RTS
02F1-            I   463       ;
02F1-A9 FF       I   464 (  2) ILLEGAL LDA     #$FF
02F3-18          I   465 (  2)         CLC                 ; ILLEGAL
02F4-B8          I   466 (  2)         CLV                 ; RETURN
02F5-60          I   467 (  6)         RTS
02F6-            I   468       ;
02F6-            I   469       ;       REPLACE PIECE ON CORRECT SQUARE
02F6-            I   470       ;
02F6-A6 B0       I   471 (  3) RESET   LDX     PIECE       ; GET LOGAT
02F8-B5 50       I   472 (  4)         LDA     BOARD,X     ; FOR PIECE
02FA-85 B1       I   473 (  2)         STA     SQUARE      ; FROM BOARD
02FC-60          I   474 (  6)         RTS
02FD-            I   475       ;
02FD-            I   476       ;
02FD-            I   477       ;
02FD-20 23 03    I   478 (  6) GENRM   JSR     MOVE        ; MAKE MOVE
0300-20 89 02    I   479 (  6) GENR2   JSR     REVERSE     ; REVERSE BOARD
0303-20 E0 01    I   480 (  6)         JSR     GNM         ; GENERATE MOVES
0306-20 89 02    I   481 (  6) RUM     JSR     REVERSE     ; REVERSE BACK
0309-            I   482       ;
0309-            I   483       ;       ROUTINE TO UNMAKE A MOVE MADE BY
0309-            I   484       ;       MOVE
0309-            I   485       ;
0309-BA          I   486 (  2) UMOVE   TSX                 ; UNMAKE MOVE
030A-86 B3       I   487 (  3)         STX     SP1
030C-A6 B2       I   488 (  3)         LDX     SP2         ; EXCHANGE
030E-9A          I   489 (  2)         TXS                 ; STACKS
030F-68          I   490 (  4)         PLA                 ; MOVEN
0310-85 B6       I   491 (  2)         STA     MOVEN
0312-68          I   492 (  4)         PLA                 ; CAPTURED
0313-85 B0       I   493 (  2)         STA     PIECE       ; PIECE
0315-AA          I   494 (  2)         TAX
0316-68          I   495 (  4)         PLA                 ; FROM SQUARE
0317-95 50       I   496 (  4)         STA     BOARD,X
0319-68          I   497 (  4)         PLA                 ; PIECE
031A-AA          I   498 (  2)         TAX
031B-68          I   499 (  4)         PLA                 ; TO SOUARE
031C-85 B1       I   500 (  2)         STA     SQUARE
031E-95 50       I   501 (  4)         STA     BOARD,X
0320-4C 48 03    I   502 (  3)         JMP     STRV
0323-            I   503       ;
0323-            I   504       ;       THIS ROUTINE MOVES PIECE
0323-            I   505       ;       TO SQUARE, PARAMETERS
0323-            I   506       ;       ARE SAVED IN A STACK TO UNMAKE
0323-            I   507       ;       THE MOVE LATER
0323-            I   508       ;
0323-BA          I   509 (  2) MOVE    TSX
0324-86 B3       I   510 (  3)         STX     SP1         ; SWITCH
0326-A6 B2       I   511 (  3)         LDX     SP2         ; STACKS
0328-9A          I   512 (  2)         TXS
0329-A5 B1       I   513 (  3)         LDA     SQUARE
032B-48          I   514 (  3)         PHA                 ; TO SQUARE
032C-A8          I   515 (  2)         TAY
032D-A2 1F       I   516 (  2)         LDX     #$1F
032F-D5 50       I   517 (  4) CHECK   CMP     BOARD,X     ; CHECK FOR
0331-F0 03       I   518 (2**)         BEQ     TAKE        ; CAPTURE
0333-CA          I   519 (  2)         DEX
0334-10 F9       I   520 (2**)         BPL     CHECK
0336-A9 CC       I   521 (  2) TAKE    LDA     #$CC
0338-95 50       I   522 (  4)         STA     BOARD,X
033A-8A          I   523 (  2)         TXA                 ; CAPTURED
033B-48          I   524 (  3)         PHA                 ; PIECE
033C-A6 B0       I   525 (  3)         LDX     PIECE
033E-B5 50       I   526 (  4)         LDA     BOARD,X
0340-94 50       I   527 (  4)         STY     BOARD,X     ; FROM
0342-48          I   528 (  3)         PHA                 ; SQUARE
0343-8A          I   529 (  2)         TXA
0344-48          I   530 (  3)         PHA                 ; PIECE
0345-A5 B6       I   531 (  3)         LDA     MOVEN
0347-48          I   532 (  3)         PHA                 ; MOVEN
0348-BA          I   533 (  2) STRV    TSX
0349-86 B2       I   534 (  3)         STX     SP2         ; SWITCH
034B-A6 B3       I   535 (  3)         LDX     SP1         ; STACKS
034D-9A          I   536 (  2)         TXS                 ; BACK
034E-60          I   537 (  6)         RTS
034F-            I   538       ;
034F-            I   539       ;       CONTINUATION OF SUB STRATGY
034F-            I   540       ;       -CHECKS FOR CHECK OR CHECKMATE
034F-            I   541       ;       AND ASSIGNS VALUE TO MOVE
034F-            I   542       ;
034F-A6 E4       I   543 (  3) CKMATE  LDX     BMAXC       ; CAN BLK CAP
0351-EC 31 06    I   544 (  4)         CPX     POINTS      ; MY KING?
0354-D0 04       I   545 (2**)         BNE     NOCHEK
0356-A9 00       I   546 (  2)         LDA     #$00        ; GULP!
0358-F0 0A       I   547 (2**)         BEQ     RETV        ; DUMB MOVE!
035A-            I   548       ;
035A-A6 E3       I   549 (  3) NOCHEK  LDX     BMOB        ; IS BLACK
035C-D0 06       I   550 (2**)         BNE     RETV        ; UNABLE TO
035E-A6 EE       I   551 (  3)         LDX     WMAXP       ; MOVE AND
0360-D0 02       I   552 (2**)         BNE     RETV        ; KING IN CH?
0362-A9 FF       I   553 (  2)         LDA     #$FF        ; YES! MATE
0364-            I   554       ;
0364-A2 04       I   555 (  2) RETV    LDX     #$04        ; RESTORE
0366-86 B5       I   556 (  3)         STX     STATE       ; STATE=4
0368-            I   557       ;
0368-            I   558       ;       THE VALUE OF THE MOVE (IN ACCU)
0368-            I   559       ;       IS COMPARED TO THE BEST MOVE AND
0368-            I   560       ;       REPLACES IT IF IT IS BETTER
0368-            I   561       ;
0368-C5 FA       I   562 (  3) PUSH    CMP     BESTV       ; IS THIS BEST
036A-90 0C       I   563 (2**)         BCC     RETP        ; MOVE SO FAR?
036C-F0 0A       I   564 (2**)         BEQ     RETP
036E-85 FA       I   565 (  2)         STA     BESTV       ; YES!
0370-A5 B0       I   566 (  3)         LDA     PIECE       ; SAVE IT
0372-85 FB       I   567 (  2)         STA     BESTP
0374-A5 B1       I   568 (  3)         LDA     SQUARE
0376-85 F9       I   569 (  2)         STA     BESTM       ; FLASH DISPLAY
0378-A9 AE       I   570 (  2) RETP    LDA     #"."        ; print ... instead of flashing disp
037A-4C 32 05    I   571 (  3)         JMP     syschout    ; print . and return
037D-            I   572       ;
037D-            I   573       ;       MAIN PROGRAM TO PLAY CHESS
037D-            I   574       ;       PLAY FROM OPENING OR THINK
037D-            I   575       ;
037D-A6 DC       I   576 (  3) GO      LDX     OMOVE       ; OPENING?
037F-30 1C       I   577 (2**)         BMI     NOOPEN      ; -NO   *ADD CHANGE FROM BPL
0381-A5 F9       I   578 (  3)         LDA     DIS3        ; -YES WAS
0383-DD 41 06    I   579 ( 4*)         CMP     OPNING,X    ; OPPONENT'S
0386-D0 11       I   580 (2**)         BNE     END         ; MOVE OK?
0388-CA          I   581 (  2)         DEX
0389-BD 41 06    I   582 ( 4*)         LDA     OPNING,X    ; GET NEXT
038C-85 FB       I   583 (  2)         STA     DIS1        ; CANNED
038E-CA          I   584 (  2)         DEX                 ; OPENING MOVE
038F-BD 41 06    I   585 ( 4*)         LDA     OPNING,X
0392-85 F9       I   586 (  2)         STA     DIS3        ; DISPLAY IT
0394-CA          I   587 (  2)         DEX
0395-86 DC       I   588 (  3)         STX     OMOVE       ; MOVE IT
0397-D0 1C       I   589 (2**)         BNE     MV2         ; (JMP)
0399-            I   590       ;
0399-A9 FF       I   591 (  2) END     LDA     #$FF        ; *ADD - STOP CANNED MOVES
039B-85 DC       I   592 (  2)         STA     OMOVE       ; FLAG OPENING
039D-A2 0C       I   593 (  2) NOOPEN  LDX     #$0C        ; FINISHED
039F-86 B5       I   594 (  3)         STX     STATE       ; STATE=C
03A1-86 FA       I   595 (  3)         STX     BESTV       ; CLEAR BESTV
03A3-A2 14       I   596 (  2)         LDX     #$14        ; GENERATE P
03A5-20 D9 01    I   597 (  6)         JSR     GNMX        ; MOVES
03A8-            I   598
03A8-A2 04       I   599 (  2)         LDX     #$04        ; STATE=4
03AA-86 B5       I   600 (  3)         STX     STATE       ; GENERATE AND
03AC-20 D7 01    I   601 (  6)         JSR     GNMZ        ; TEST AVAILABLE MOVES
03AF-            I   602
03AF-A6 FA       I   603 (  3)         LDX     BESTV       ; GET BEST MOVE
03B1-E0 0F       I   604 (  2)         CPX     #$0F        ; IF NONE
03B3-90 12       I   605 (2**)         BCC     MATE        ; OH OH!
03B5-            I   606       ;
03B5-A6 FB       I   607 (  3) MV2     LDX     BESTP       ; MOVE
03B7-B5 50       I   608 (  4)         LDA     BOARD,X     ; THE
03B9-85 FA       I   609 (  2)         STA     BESTV       ; BEST
03BB-86 B0       I   610 (  3)         STX     PIECE       ; MOVE
03BD-A5 F9       I   611 (  3)         LDA     BESTM
03BF-85 B1       I   612 (  2)         STA     SQUARE      ; AND DISPLAY
03C1-20 23 03    I   613 (  6)         JSR     MOVE        ; IT
03C4-4C CF 00    I   614 (  3)         JMP     CHESS
03C7-            I   615       ;
03C7-A9 FF       I   616 (  2) MATE        LDA #$FF        ; RESIGN
03C9-60          I   617 (  6)         RTS                 ; OR STALEMATE
03CA-            I   618       ;
03CA-            I   619       ;       SUBROUTINE TO ENTER THE
03CA-            I   620       ;       PLAYER'S MOVE
03CA-            I   621       ;
03CA-A2 04       I   622 (  2) DISMV   LDX     #$04        ; ROTATE
03CC-06 F9       I   623 (  5) DROL    ASL     DIS3        ; KEY
03CE-26 FA       I   624 (  5)         ROL     DIS2        ; INTO
03D0-CA          I   625 (  2)         DEX                 ; DISPLAY
03D1-D0 F9       I   626 (2**)         BNE     DROL        ;
03D3-05 F9       I   627 (  3)         ORA     DIS3
03D5-85 F9       I   628 (  2)         STA     DIS3
03D7-85 B1       I   629 (  2)         STA     SQUARE
03D9-60          I   630 (  6)         RTS
03DA-            I   631       ;
03DA-            I   632       ;       THE FOLLOWING SUBROUTINE ASSIGNS
03DA-            I   633       ;       A VALUE TO THE MOVE UNDER
03DA-            I   634       ;       CONSIDERATION AND RETURNS IT IN
03DA-            I   635       ;       THE ACCUMULATOR
03DA-            I   636       ;
03DA-            I   637
03DA-18          I   638 (  2) STRATGY CLC
03DB-A9 80       I   639 (  2)         LDA     #$80
03DD-65 EB       I   640 (  3)         ADC     WMOB        ; PARAMETERS
03DF-65 EC       I   641 (  3)         ADC     WMAXC       ; WITH WEIGHT
03E1-65 ED       I   642 (  3)         ADC     WCC         ; OF 0.25
03E3-65 E1       I   643 (  3)         ADC     WCAP1
03E5-65 DF       I   644 (  3)         ADC     WCAP2
03E7-38          I   645 (  2)         SEC
03E8-E5 F0       I   646 (  3)         SBC     PMAXC
03EA-E5 F1       I   647 (  3)         SBC     PCC
03EC-E5 E2       I   648 (  3)         SBC     BCAP0
03EE-E5 E0       I   649 (  3)         SBC     BCAP1
03F0-E5 DE       I   650 (  3)         SBC     BCAP2
03F2-E5 EF       I   651 (  3)         SBC     PMOB
03F4-E5 E3       I   652 (  3)         SBC     BMOB
03F6-B0 02       I   653 (2**)         BCS     POS         ; UNDERFLOW
03F8-A9 00       I   654 (  2)         LDA     #$00        ; PREVENTION
03FA-4A          I   655 (  2) POS     LSR
03FB-18          I   656 (  2)         CLC                 ; **************
03FC-69 40       I   657 (  2)         ADC     #$40
03FE-65 EC       I   658 (  3)         ADC     WMAXC       ; PARAMETERS
0400-65 ED       I   659 (  3)         ADC     WCC         ; WITH WEIGHT
0402-38          I   660 (  2)         SEC                 ; OF 0.5
0403-E5 E4       I   661 (  3)         SBC     BMAXC
0405-4A          I   662 (  2)         LSR                 ; **************
0406-18          I   663 (  2)         CLC
0407-69 90       I   664 (  2)         ADC     #$90
0409-65 DD       I   665 (  3)         ADC     WCAP0       ; PARAMETERS
040B-65 DD       I   666 (  3)         ADC     WCAP0       ; WITH WEIGHT
040D-65 DD       I   667 (  3)         ADC     WCAP0       ; OF 1.0
040F-65 DD       I   668 (  3)         ADC     WCAP0
0411-65 E1       I   669 (  3)         ADC     WCAP1
0413-38          I   670 (  2)         SEC                 ; [UNDER OR OVER-
0414-E5 E4       I   671 (  3)         SBC     BMAXC       ; FLOW MAY OCCUR
0416-E5 E4       I   672 (  3)         SBC     BMAXC       ; FROM THIS
0418-E5 E5       I   673 (  3)         SBC     BMCC        ; SECTION]
041A-E5 E5       I   674 (  3)         SBC     BMCC
041C-E5 E0       I   675 (  3)         SBC     BCAP1
041E-A6 B1       I   676 (  3)         LDX     SQUARE      ; ***************
0420-E0 33       I   677 (  2)         CPX     #$33
0422-F0 16       I   678 (2**)         BEQ     POSN        ; POSITION
0424-E0 34       I   679 (  2)         CPX     #$34        ; BONUS FOR
0426-F0 12       I   680 (2**)         BEQ     POSN        ; MOVE TO
0428-E0 22       I   681 (  2)         CPX     #$22        ; CENTRE
042A-F0 0E       I   682 (2**)         BEQ     POSN        ; OR
042C-E0 25       I   683 (  2)         CPX     #$25        ; OUT OF
042E-F0 0A       I   684 (2**)         BEQ     POSN        ; BACK RANK
0430-A6 B0       I   685 (  3)         LDX     PIECE
0432-F0 09       I   686 (2**)         BEQ     NOPOSN
0434-B4 50       I   687 (  4)         LDY     BOARD,X
0436-C0 10       I   688 (  2)         CPY     #$10
0438-10 03       I   689 (2**)         BPL     NOPOSN
043A-18          I   690 (  2) POSN    CLC
043B-69 02       I   691 (  2)         ADC     #$02
043D-4C 4F 03    I   692 (  3) NOPOSN  JMP     CKMATE      ; CONTINUE
0440-            I   693
0440-            I   694
0440-            I   695       ;-----------------------------------------------------------------
0440-            I   696       ; The following routines were added to allow text-based board
0440-            I   697       ; display over a standard RS-232 port.
0440-            I   698       ;
0440-20 DF 04    I   699 (  6) POUT    JSR     pout9       ; print CRLF
0443-20 03 05    I   700 (  6)         JSR     pout13      ; print copyright
0446-20 EA 04    I   701 (  6)         JSR     POUT10      ; print column labels
0449-A0 00       I   702 (  2)         LDY     #$00        ; init board location
044B-20 B1 04    I   703 (  6)         JSR     POUT5       ; print board horz edge
044E-A9 FC       I   704 (  2) POUT1   lDA     #"|"        ; print vert edge
0450-20 32 05    I   705 (  6)         JSR     syschout    ; PRINT ONE ASCII CHR - SPACE
0453-A2 1F       I   706 (  2)         LDX     #$1F
0455-98          I   707 (  2) POUT2   TYA                 ; scan the pieces for a location match
0456-D5 50       I   708 (  4)         CMP     BOARD,X     ; match found?
0458-F0 40       I   709 (2**)         BEQ     POUT4       ; yes; print the piece's color and type
045A-CA          I   710 (  2)         DEX                 ; no
045B-10 F8       I   711 (2**)         BPL     POUT2       ; if not the last piece, try again
045D-98          I   712 (  2)         TYA                 ; empty square
045E-29 01       I   713 (  2)         AND     #$01        ; odd or even column?
0460-85 FC       I   714 (  2)         STA     temp        ; save it
0462-98          I   715 (  2)         TYA                 ; is the row odd or even
0463-4A          I   716 (  2)         LSR                 ; shift column right 4 spaces
0464-4A          I   717 (  2)         LSR                 ;
0465-4A          I   718 (  2)         LSR                 ;
0466-4A          I   719 (  2)         LSR                 ;
0467-29 01       I   720 (  2)         AND     #$01        ; strip LSB
0469-18          I   721 (  2)         CLC
046A-65 FC       I   722 (  3)         ADC     temp        ; combine row & col to determine square color
046C-29 01       I   723 (  2)         AND     #$01        ; is board square white or blk?
046E-F0 03       I   724 (2**)         BEQ     pout25      ; white, print space
0470-A9 AA       I   725 (  2)         LDA     #"*"        ; black, print *
0472-2C          I   726               .DB     $2c         ; used to skip over LDA #$20
0473-A9 20       I   727 (  2) POUT25  LDA     #$20        ; ASCII space
0475-20 32 05    I   728 (  6)         JSR     syschout    ; PRINT ONE ASCII CHR - SPACE
0478-20 32 05    I   729 (  6)         JSR     syschout    ; PRINT ONE ASCII CHR - SPACE
047B-C8          I   730 (  2) POUT3   INY                 ;
047C-98          I   731 (  2)         TYA                 ; get row number
047D-29 08       I   732 (  2)         AND     #$08        ; have we completed the row?
047F-F0 CD       I   733 (2**)         BEQ     POUT1       ; no, do next column
0481-A9 FC       I   734 (  2)         LDA     #"|"        ; yes, put the right edge on
0483-20 32 05    I   735 (  6)         JSR     syschout    ; PRINT ONE ASCII CHR - |
0486-20 FC 04    I   736 (  6)         JSR pout12          ; print row number
0489-20 DF 04    I   737 (  6)         JSR     POUT9       ; print CRLF
048C-20 B1 04    I   738 (  6)         JSR     POUT5       ; print bottom edge of board
048F-18          I   739 (  2)         CLC                 ;
0490-98          I   740 (  2)         TYA                 ;
0491-69 08       I   741 (  2)         ADC     #$08        ; point y to beginning of next row
0493-A8          I   742 (  2)         TAY                 ;
0494-C0 80       I   743 (  2)         CPY     #$80        ; was that the last row?
0496-F0 2B       I   744 (2**)         BEQ     POUT8       ; yes, print the LED values
0498-D0 B4       I   745 (2**)         BNE     POUT1       ; no, do new row
049A-            I   746
049A-A5 B7       I   747 (  3) POUT4   LDA     REV         ; print piece's color & type
049C-F0 05       I   748 (2**)         BEQ     POUT41      ;
049E-BD B6 05    I   749 ( 4*)         LDA     cpl+16,X    ;
04A1-D0 03       I   750 (2**)         BNE     POUT42      ;
04A3-BD A6 05    I   751 ( 4*) POUT41  LDA     cpl,x       ;
04A6-20 32 05    I   752 (  6) POUT42  JSR     syschout    ;
04A9-BD D6 05    I   753 ( 4*)         LDA     cph,x       ;
04AC-20 32 05    I   754 (  6)         JSR     syschout    ;
04AF-D0 CA       I   755 (2**)         BNE     POUT3       ; branch always
04B1-            I   756
04B1-8A          I   757 (  2) POUT5   TXA                 ; print "-----...-----<crlf>"
04B2-48          I   758 (  3)         PHA
04B3-A2 19       I   759 (  2)         LDX     #$19
04B5-A9 AD       I   760 (  2)         LDA     #"-"
04B7-20 32 05    I   761 (  6) POUT6   JSR     syschout    ; PRINT ONE ASCII CHR - "-"
04BA-CA          I   762 (  2)         DEX
04BB-D0 FA       I   763 (2**)         BNE     POUT6
04BD-68          I   764 (  4)         PLA
04BE-AA          I   765 (  2)         TAX
04BF-20 DF 04    I   766 (  6)         JSR     POUT9
04C2-60          I   767 (  6)         RTS
04C3-            I   768
04C3-20 EA 04    I   769 (  6) POUT8   JSR     pout10      ;
04C6-A5 FB       I   770 (  3)         LDA     $FB
04C8-20 3F 05    I   771 (  6)         JSR     hexout      ; PRINT 1 BYTE AS 2 HEX CHRS
04CB-A9 20       I   772 (  2)         LDA     #$20
04CD-20 32 05    I   773 (  6)         JSR     syschout    ; PRINT ONE ASCII CHR - SPACE
04D0-A5 FA       I   774 (  3)         LDA     $FA
04D2-20 3F 05    I   775 (  6)         JSR     hexout      ; PRINT 1 BYTE AS 2 HEX CHRS
04D5-A9 20       I   776 (  2)         LDA     #$20
04D7-20 32 05    I   777 (  6)         JSR     syschout    ; PRINT ONE ASCII CHR - SPACE
04DA-A5 F9       I   778 (  3)         LDA     $F9
04DC-20 3F 05    I   779 (  6)         JSR     hexout      ; PRINT 1 BYTE AS 2 HEX CHRS
04DF-            I   780
04DF-A9 0D       I   781 (  2) POUT9   LDA     #$0D
04E1-20 32 05    I   782 (  6)         JSR     syschout    ; PRINT ONE ASCII CHR - CR
04E4-A9 0A       I   783 (  2)         LDA     #$0A
04E6-20 32 05    I   784 (  6)         JSR     syschout    ; PRINT ONE ASCII CHR - LF
04E9-60          I   785 (  6)                 RTS
04EA-            I   786
04EA-A2 00       I   787 (  2) pout10  LDX     #$00        ; print the column labels
04EC-A9 20       I   788 (  2) POUT11  LDA     #$20        ; 00 01 02 03 ... 07 <CRLF>
04EE-20 32 05    I   789 (  6)         JSR     syschout
04F1-8A          I   790 (  2)         TXA
04F2-20 3F 05    I   791 (  6)         JSR     hexout
04F5-E8          I   792 (  2)         INX
04F6-E0 08       I   793 (  2)         CPX     #$08
04F8-D0 F2       I   794 (2**)         BNE     POUT11
04FA-F0 E3       I   795 (2**)         BEQ     POUT9
04FC-98          I   796 (  2) POUT12  TYA
04FD-29 70       I   797 (  2)         AND     #$70
04FF-20 3F 05    I   798 (  6)         JSR     hexout
0502-60          I   799 (  6)         RTS
0503-            I   800
0503-A2 00       I   801 (  2) Pout13  LDX     #$00        ; Print the copyright banner
0505-BD 6D 05    I   802 ( 4*) Pout14  LDA     banner,x
0508-F0 06       I   803 (2**)         BEQ     POUT15
050A-20 32 05    I   804 (  6)         JSR     syschout
050D-E8          I   805 (  2)         inx
050E-D0 F5       I   806 (2**)         bne     POUT14
0510-60          I   807 (  6) POUT15  RTS
0511-            I   808
0511-A9 BF       I   809 (  2) KIN     LDA     #"?"
0513-20 32 05    I   810 (  6)         JSR     syschout    ; PRINT ONE ASCII CHR - ?
0516-20 27 05    I   811 (  6)         JSR     syskin      ; GET A KEYSTROKE FROM SYSTEM
0519-29 4F       I   812 (  2)         AND     #$4F        ; MASK 0-7, AND ALPHA'S
051B-60          I   813 (  6)         RTS
051C-            I   814       ;
051C-            I   815       ; 6551 I/O Support Routines
051C-            I   816       ;
051C-            I   817       ;
051C-A9 1F       I   818 (  2) Init_6551      LDA   #$1F               ; 19.2K/8/1
051E-8D 73 7F    I   819 (  4)                STA   ACIActl            ; control reg
0521-A9 0B       I   820 (  2)                LDA   #$0B               ; N parity/echo off/rx int off/ dtr active low
0523-8D 72 7F    I   821 (  4)                STA   ACIAcmd            ; command reg
0526-60          I   822 (  6)                RTS                      ; done
0527-            I   823       ;
0527-            I   824       ; input chr from ACIA1 (waiting)
0527-            I   825       ;
0527-AD 71 7F    I   826 (  4) syskin         LDA   ACIASta            ; Serial port status
052A-29 08       I   827 (  2)                AND   #$08               ; is recvr full
052C-F0 F9       I   828 (2**)                BEQ   syskin             ; no char to get
052E-AD 70 7F    I   829 (  4)                Lda   ACIAdat            ; get chr
0531-60          I   830 (  6)                RTS                      ;
0532-            I   831       ;
0532-            I   832       ; output to OutPut Port
0532-            I   833       ;
0532-48          I   834 (  3) syschout       PHA                      ; save registers
0533-AD 71 7F    I   835 (  4) ACIA_Out1      LDA   ACIASta            ; serial port status
0536-29 10       I   836 (  2)                AND   #$10               ; is tx buffer empty
0538-F0 F9       I   837 (2**)                BEQ   ACIA_Out1          ; no
053A-68          I   838 (  4)                PLA                      ; get chr
053B-8D 70 7F    I   839 (  4)                STA   ACIAdat            ; put character to Port
053E-60          I   840 (  6)                RTS                      ; done
053F-            I   841
053F-48          I   842 (  3) hexout  PHA                 ;  prints AA hex digits
0540-4A          I   843 (  2)         LSR                 ;  MOVE UPPER NIBBLE TO LOWER
0541-4A          I   844 (  2)         LSR
0542-4A          I   845 (  2)         LSR
0543-4A          I   846 (  2)         LSR
0544-20 48 05    I   847 (  6)         JSR     PrtHex
0547-68          I   848 (  4)         PLA
0548-29 0F       I   849 (  2) PrtHex  AND     #$0F        ;  prints A hex nibble (low 4 bits)
054A-            I   850       ;       PHY                 ; Push Y to stack (65c02)
054A-85 FD       I   851 (  2)         STA     temp2       ; Save accumulator
054C-98          I   852 (  2)         TYA                 ; Y->A
054D-48          I   853 (  3)         PHA                 ; A->S
054E-A5 FD       I   854 (  3)         LDA     temp2       ; Restore accumulator
0550-            I   855
0550-A8          I   856 (  2)         TAY
0551-B9 5D 05    I   857 ( 4*)         LDA     Hexdig,Y
0554-            I   858
0554-85 FD       I   859 (  2)         STA     temp2       ; Save accumulator
0556-68          I   860 (  4)         PLA
0557-A8          I   861 (  2)         TAY
0558-            I   862       ;       PLY                 ; Pull Y from stack (65c02)
0558-A5 FD       I   863 (  3)         LDA     temp2       ; Restore accumulator
055A-4C 32 05    I   864 (  3)         JMP     syschout
055D-            I   865
055D-30 31 32 33 
     34 35 36 37 
     38 39 41 42 
     43 44 45 46 I   866       Hexdig  .AS     "0123456789ABCDEF"
056D-4D 69 63 72 
     6F 43 68 65 
     73 73 20 28 
     63 29 20 31 
     39 39 36 2D 
     32 30 30 35 
     20 50 65 74 
     65 72 20 4A 
     65 6E 6E 69 
     6E 67 73 2C 
     20 77 77 77 
     2E 62 65 6E 
     6C 6F 2E 63 
     6F 6D       I   867       banner  .AS     "MicroChess (c) 1996-2005 Peter Jennings, www.benlo.com"
05A3-0D 0A 00    I   868               .DB     $0d, $0a, $00
05A6-57 57 57 57 
     57 57 57 57 
     57 57 57 57 
     57 57 57 57 
     42 42 42 42 
     42 42 42 42 
     42 42 42 42 
     42 42 42 42 
     57 57 57 57 
     57 57 57 57 
     57 57 57 57 
     57 57 57 57 I   869       cpl     .AS     "WWWWWWWWWWWWWWWWBBBBBBBBBBBBBBBBWWWWWWWWWWWWWWWW"
05D6-4B 51 52 52 
     42 42 4E 4E 
     50 50 50 50 
     50 50 50 50 
     4B 51 52 52 
     42 42 4E 4E 
     50 50 50 50 
     50 50 50 50 I   870       cph     .AS     "KQRRBBNNPPPPPPPPKQRRBBNNPPPPPPPP"
05F6-00          I   871               .DB     $00
05F7-            I   872       ;
05F7-            I   873       ; end of added code
05F7-            I   874       ;
0600                 16               .NO     $0600,$FF
0600-                 17               .IN     data.asm
0600-            I     1       ;
0600-            I     2       ; BLOCK DATA
0600-            I     3       ;
0600-03 04 00 07 
     02 05 01 06 I     4       SETW    .DB     $03, $04, $00, $07, $02, $05, $01, $06
0608-10 17 11 16 
     12 15 14 13 I     5               .DB     $10, $17, $11, $16, $12, $15, $14, $13
0610-73 74 70 77 
     72 75 71 76 I     6               .DB     $73, $74, $70, $77, $72, $75, $71, $76
0618-60 67 61 66 
     62 65 64 63 I     7                       .DB     $60, $67, $61, $66, $62, $65, $64, $63
0620-            I     8
0620-00 F0 FF 01 
     10 11 0F EF 
     F1          I     9       MOVEX   .DB     $00, $F0, $FF, $01, $10, $11, $0F, $EF, $F1
0629-DF E1 EE F2 
     12 0E 1F 21 I    10                       .DB     $DF, $E1, $EE, $F2, $12, $0E, $1F, $21
0631-            I    11
0631-0B 0A 06 06 
     04 04 04 04 I    12       POINTS  .DB     $0B, $0A, $06, $06, $04, $04, $04, $04
0639-02 02 02 02 
     02 02 02 02 I    13                       .DB     $02, $02, $02, $02, $02, $02, $02, $02
0641-            I    14
0641-99 25 0B 25 
     01 00 33 25 I    15       OPNING  .DB     $99, $25, $0B, $25, $01, $00, $33, $25
0649-07 36 34 0D 
     34 34 0E 52 I    16                       .DB     $07, $36, $34, $0D, $34, $34, $0E, $52
0651-25 0D 45 35 
     04 55 22 06 I    17               .DB     $25, $0D, $45, $35, $04, $55, $22, $06
0659-43 33 0F CC I    18                       .DB     $43, $33, $0F, $CC
